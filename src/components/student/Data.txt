1.Admission ID
2.Allotment Category
    Merit
    Management 
3.Fee Category 
    Merit High Fees
    Merit Low Fees
    NRI
4.Name 
5.Photo
6.Address
7.Religion	
8.Community	
9.Gender
    Male
    Female 
    Transgender
10.Date Of Birth 
11.Blood Group
12.Mobile No
13.Email
14.Entrance Roll No
15.Entrance Rank	
16.Aadhar No	
17.Course
18.Plus Two 
    Board
    Register No
    Month and Year of Exam
    Percentage 
    Name Of School
    Physics (Mark/Total)
    Chemistry (Mark/Total)
    Mathematics(Mark/Total)
19.Tenth 
    Board
    Register No
    Month and Year of Exam
    Percentage 
    Name Of School
    Physics (Mark/Total)
    Chemistry (Mark/Total)
    Mathematics(Mark/Total)
20.Parent Details
    Father
        Name
        Occupation 
        Mobile No
    Mother
        Name
        Occupation 
        Mobile No
    Address for Communication 
21.Annual Income
22.Nativity
23.Joint Bank Account(if any)




/* DataEntryForm.css */

.data-entry-container {
    margin-top: 20px;
  }
  
  .data-entry-container .container {
    max-width: 900px;
    margin: 20px auto;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }
  
  .data-entry-container  .form {
    background-color: #f0f0f0;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }
  
  .data-entry-container .form-group {
    margin-bottom: 15px;
  }
  
  .data-entry-container  .photo-preview {
    max-width: 100%;
    height: auto;
    margin-top: 10px;
  }
  
  .data-entry-container  .box-container {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
  }

  .data-entry-container h4{
    color: #000000ee;
  }
  
  .data-entry-container .box {
    width: 48%;
    background-color: #fff;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
    margin-bottom: 15px;
  }
  
  .data-entry-container .button-container {
    display: flex;
    justify-content: space-evenly;
    margin-top: 20px;
  }
  
  .data-entry-container  .submit-button,
  .clear-button {
    padding: 10px 20px;
    margin-left: 10px;
    cursor: pointer;
    font-size: 16px;
    border: none;
    border-radius: 4px;
  }

  .data-entry-container .submit-button {
    background-color: #4caf50;
    color: #fff;
  }
  
  .data-entry-container .clear-button {
    background-color: #f44336;
    color: #fff;
  }

  .data-entry-container label {
    display: block;
    font-weight: bold;
    color: #000000ee;
    margin-bottom: 5px;
  }
  
  .data-entry-container input,
  select,
  textarea {
    margin-top: 5px;
    height: 40px;
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
  }
  
  .data-entry-container select {
    color: #000000ee;
    height: 40px; /* Adjust the height based on your design */
  }
  /* Add any other styling as needed */



  // DataEntryForm.js
import React, { useState } from "react";
import axios from "axios";
import Navbar from "./OfficerNavbar";
import './DataEntry.css';

function DataEntryForm({ fetchStudents }) {
  const [formData, setFormData] = useState({
    admissionId: "",
    allotmentCategory: "",
    feeCategory: "",
    name: "",
    photo: null,
    address: "",
    pincode:"",
    religion: "",
    community: "",
    gender: "",
    dateOfBirth: "",
    bloodGroup: "",
    mobileNo: "",
    whatsappNo:"",
    email: "",
    entranceExam: {
      name: "keam", 
      other: "",
    },
    entranceRollNo: "",
    entranceRank: "",
    aadharNo: "",
    course: "",
    plusTwo: {
      board: "",
      registerNo: "",
      examMonthYear: "",
      percentage: "",
      schoolName: "",
      physics: "",
      chemistry: "",
      mathematics: "",
    },
    tenth: {
      board: "",
      registerNo: "",
      examMonthYear: "",
      percentage: "",
      schoolName: "",
      physics: "",
      chemistry: "",
      mathematics: "",
    },
    parentDetails: {
      father: {
        name: "",
        occupation: "",
        mobileNo: "",
      },
      mother: {
        name: "",
        occupation: "",
        mobileNo: "",
      },
      communicationAddress: "",
    },
    annualIncome: "",
    nativity: "",
    bankDetails: {
      bankName: "",
      branch: "",
      accountNo: "",
      ifscCode: "",
    },
  });

  const handleChange = (event) => {
    const { name, value, files } = event.target;

    if (name === "photo") {
      setFormData({ ...formData, [name]: files[0] });
    } else if (name.includes("plusTwo") || name.includes("tenth")) {
      const [field, subField] = name.split(".");
      setFormData({
        ...formData,
        parentDetails: {
          ...formData.parentDetails,
        [field]: {
          ...formData[field],
          [subField]: value,
        },
      },
      });
    } else if (name.includes("father") || name.includes("mother")) {
      const [field, subField] = name.split(".");
      setFormData({
        ...formData,
        parentDetails: {
          ...formData.parentDetails,
          [field]: {
            ...formData.parentDetails[field],
            [subField]: value,
          },
        },
      });
    } else if (name === "entranceExam.type") {
      setFormData({
        ...formData,
        entranceExam: {
          ...formData.entranceExam,
          type: value,
          name: "", // Reset name when changing type
        },
      });
    } else if (name === "entranceExam.name") {
      setFormData({
        ...formData,
        entranceExam: {
          ...formData.entranceExam,
          name: value,
        },
      });
    } else  if (name.startsWith("bankDetails")) {
      const [, subField] = name.split(".");
      setFormData({
        ...formData,
        bankDetails: {
          ...formData.bankDetails,
          [subField]: value,
        },
      });

    } else {
      setFormData({ ...formData, [name]: value });
    }
  };

  const handleSubmit = async (event) => {
    event.preventDefault();

    try {
      const sendData = new FormData();

      for (const key in formData) {
        if (formData[key] instanceof Object && !(formData[key] instanceof File)) {
          for (const subKey in formData[key]) {
            sendData.append(`${key}.${subKey}`, formData[key][subKey]);
          }
        } else {
          sendData.append(key, formData[key]);
        }
      }

      await axios.post("/api/students", sendData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      setFormData({
        admissionId: "",
        allotmentCategory: "",
        feeCategory: "",
        name: "",
        photo: null,
        address: "",
        pincode:"",
        religion: "",
        community: "",
        gender: "",
        dateOfBirth: "",
        bloodGroup: "",
        mobileNo: "",
        whatsappNo:"",
        email: "",
        entranceExam: {
          name: "keam", 
          other: "",
        },
        entranceRollNo: "",
        entranceRank: "",
        aadharNo: "",
        course: "",
        plusTwo: {
          board: "",
          registerNo: "",
          examMonthYear: "",
          percentage: "",
          schoolName: "",
          physics: "",
          chemistry: "",
          mathematics: "",
        },
        tenth: {
          board: "",
          registerNo: "",
          examMonthYear: "",
          percentage: "",
          schoolName: "",
          physics: "",
          chemistry: "",
          mathematics: "",
        },
        parentDetails: {
          father: {
            name: "",
            occupation: "",
            mobileNo: "",
          },
          mother: {
            name: "",
            occupation: "",
            mobileNo: "",
          },
          communicationAddress: "",
        },
        annualIncome: "",
        nativity: "",
        bankDetails: {
          bankName: "",
          branch: "",
          accountNo: "",
          ifscCode: "",
        },
      });

      fetchStudents();
    } catch (error) {
      console.error("Error submitting form:", error);
    }
  };

  return (
    <div>
      <Navbar />
      <div className="data-entry-container">
        <div className="container">
          <form className="form" onSubmit={handleSubmit}>
            <div className="form-group">
              <label>Admission ID:</label>
              <input
                type="text"
                name="admissionId"
                value={formData.admissionId}
                onChange={handleChange}
                required
              />
            </div>
            <div className="form-group">
              <label>Allotment Category:</label>
              <select
                name="allotmentCategory"
                value={formData.allotmentCategory}
                onChange={handleChange}
                required
              >
                <option value="">Select Allotment Category</option>
                <option value="merit">SM</option>
                <option value="management">MG</option>
              </select>
            </div>
            <div className="form-group">
              <label>Fee Category:</label>
              <select
                name="feeCategory"
                value={formData.feeCategory}
                onChange={handleChange}
                required
              >
                <option value="">Select Fee Category</option>
                <option value="meritRegulatedFee">Merit Regulated Fee</option>
                <option value="meritFullFee">Merit Full Fee</option>
              </select>
            </div>
            <div className="form-group">
              <label>Course:</label>
              <select
                name="course"
                value={formData.course}
                onChange={handleChange}
                required
                >
                <option value="">Select Course</option>
                <option value="computerScience">CSE</option>
                <option value="electronicsAndCommunication">ECE</option>
              </select>
            </div>
            <div className="form-group">
              <label>Name:</label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                required
              />
            </div>
            <div className="form-group">
              <label>Photo:</label>
              <input
                type="file"
                name="photo"
                onChange={handleChange}
                accept="image/*"
                required
              />
              {formData.photo && (
                <img
                  className="photo-preview"
                  src={URL.createObjectURL(formData.photo)}
                  alt="Uploaded"
                />
              )}
            </div>
            <div className="form-group">
              <label>Address:</label>
              <textarea
                name="address"
                value={formData.address}
                onChange={handleChange}
                required
              ></textarea>
            </div>
            <div className="form-group">
              <label>Pin Code:</label>
              <textarea
                name="pincode"
                value={formData.pincode}
                onChange={handleChange}
                required
              ></textarea>
            </div>
            <div className="form-group">
              <label>Religion:</label>
              <input
                type="text"
                name="religion"
                value={formData.religion}
                onChange={handleChange}
                required
              />
            </div>
            <div className="form-group">
              <label>Community:</label>
              <input
                type="text"
                name="community"
                value={formData.community}
                onChange={handleChange}
                required
              />
            </div>
            <div className="form-group">
              <label>Gender:</label>
              <select
                name="gender"
                value={formData.gender}
                onChange={handleChange}
                required
              >
                <option value="">Select Gender</option>
                <option value="male">Male</option>
                <option value="female">Female</option>
                <option value="transgender">Transgender</option>
              </select>
            </div>
            <div className="form-group">
              <label>Date Of Birth:</label>
              <input
                type="date"
                name="dateOfBirth"
                value={formData.dateOfBirth}
                onChange={handleChange}
                required
              />
            </div>
            <div className="form-group">
              <label>Blood Group:</label>
              <input
                type="text"
                name="bloodGroup"
                value={formData.bloodGroup}
                onChange={handleChange}
                required
              />
            </div>
            <div className="form-group">
              <label>Mobile No:</label>
              <input
                type="text"
                name="mobileNo"
                value={formData.mobileNo}
                onChange={handleChange}
                required
              />
            </div>
            <div className="form-group">
              <label>WhatsApp No:</label>
              <input
                type="text"
                name="whatsappNo"
                value={formData.whatsappNo}
                onChange={handleChange}
                required
              />
            </div>
            <div className="form-group">
              <label>Email:</label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                required
              />
            </div>
            <div className="form-group">
              <label>Entrance Exam:</label>
              <select
                name="entranceExam.type"
                value={formData.entranceExam.type}
                onChange={handleChange}
                required
              >
                <option value="">Exam Name</option>
                <option value="keam">KEAM</option>
                <option value="other">Other</option>
              </select>
              {formData.entranceExam.type === "other" && (
                <input
                  type="text"
                  name="entranceExam.name"
                  value={formData.entranceExam.name}
                  onChange={handleChange}
                  placeholder="Specify Exam Name"
                  required
                />
              )}
            </div>
            <div className="form-group">
              <label>Entrance Roll No:</label>
              <input
                type="text"
                name="entranceRollNo"
                value={formData.entranceRollNo}
                onChange={handleChange}
                required
              />
            </div>
            <div className="form-group">
              <label>Entrance Rank:</label>
              <input
                type="text"
                name="entranceRank"
                value={formData.entranceRank}
                onChange={handleChange}
                required
              />
            </div>
            <div className="form-group">
              <label>Aadhar No:</label>
              <input
                type="text"
                name="aadharNo"
                value={formData.aadharNo}
                onChange={handleChange}
                required
              />
            </div>
            <div className="box">
      
        <h4>Plus Two Details</h4>
        <div className="form-group">
          <label>Board:</label>
          <input
            type="text"
            name="plusTwo.board"
            value={formData.plusTwo.board}
            onChange={handleChange}
            required
          />
        </div>
        <div className="form-group">
          <label>Register No:</label>
          <input
            type="text"
            name="plusTwo.registerNo"
            value={formData.plusTwo.registerNo}
            onChange={handleChange}
            required
          />
        </div>
        <div className="form-group">
          <label>Exam Month and Year:</label>
          <input
            type="text"
            name="plusTwo.examMonthYear"
            value={formData.plusTwo.examMonthYear}
            onChange={handleChange}
            required
          />
        </div>
        <div className="form-group">
          <label>Percentage:</label>
          <input
            type="text"
            name="plusTwo.percentage"
            value={formData.plusTwo.percentage}
            onChange={handleChange}
            required
          />
        </div>
        <div className="form-group">
          <label>School Name:</label>
          <input
            type="text"
            name="plusTwo.schoolName"
            value={formData.plusTwo.schoolName}
            onChange={handleChange}
            required
          />
        </div>
        <div className="form-group">
          <label>Physics (Mark/Total):</label>
          <input
            type="text"
            name="plusTwo.physics"
            value={formData.plusTwo.physics}
            onChange={handleChange}
            required
          />
        </div>
        <div className="form-group">
          <label>Chemistry (Mark/Total):</label>
          <input
            type="text"
            name="plusTwo.chemistry"
            value={formData.plusTwo.chemistry}
            onChange={handleChange}
            required
          />
        </div>
        <div className="form-group">
          <label>Mathematics (Mark/Total):</label>
          <input
            type="text"
            name="plusTwo.mathematics"
            value={formData.plusTwo.mathematics}
            onChange={handleChange}
            required
          />
        </div>
    
            </div>
            
            <div className="box-container">
              <div className="box">
                <h4>Father's Details</h4>
                <div className="form-group">
                  <label>Name:</label>
                  <input
                    type="text"
                    name="parentDetails.father.name"
                    value={formData.parentDetails.father.name}
                    onChange={handleChange}
                    
                  />
                </div>
                <div className="form-group">
              <label>Occupation:</label>
              <input
                type="text"
                name="parentDetails.father.occupation"
                value={formData.parentDetails.father.occupation}
                onChange={handleChange}
                
              />
            </div> 
            <div className="form-group">
              <label>Mobile No:</label>
              <input
                type="text"
                name="parentDetails.father.mobileNo"
                value={formData.parentDetails.father.mobileNo}
                onChange={handleChange}
                
              />
            </div>
              </div>
              <div className="box">
                <h4>Mother's Details</h4>
                <div className="form-group">
                  <label>Name:</label>
                  <input
                    type="text"
                    name="parentDetails.mother.name"
                    value={formData.parentDetails.mother.name}
                    onChange={handleChange}
                    
                  />
                </div>
                <div className="form-group">
              <label>Occupation:</label>
              <input
                type="text"
                name="parentDetails.mother.occupation"
                value={formData.parentDetails.mother.occupation}
                onChange={handleChange}
                
              />
            </div> 
            <div className="form-group">
              <label>Mobile No:</label>
              <input
                type="text"
                name="parentDetails.mother.mobileNo"
                value={formData.parentDetails.mother.mobileNo}
                onChange={handleChange}
                
              />
            </div>
              </div>
            </div>

            <div className="form-group">
              <label>Parent's Communication Address:</label>
              <textarea
                name="parentDetails.communicationAddress"
                value={formData.parentDetails.communicationAddress}
                onChange={handleChange}
                
              ></textarea>
            </div>
            <div className="form-group">
              <label>Annual Income:</label>
              <input
                type="text"
                name="annualIncome"
                value={formData.annualIncome}
                onChange={handleChange}
                required
              />
            </div>
            <div className="form-group">
              <label>Nativity:</label>
              <input
                type="text"
                name="nativity"
                value={formData.nativity}
                onChange={handleChange}
                required
              />
            </div>
            <div className="box-container">
  <div className="box">
    <h4>Bank Account Details</h4>
    <div className="form-group">
      <label>Bank Name:</label>
      <input
        type="text"
        name="bankDetails.bankName"
        value={formData.bankDetails.bankName}
        onChange={handleChange}
        required
      />
    </div>
    <div className="form-group">
      <label>Branch:</label>
      <input
        type="text"
        name="bankDetails.branch"
        value={formData.bankDetails.branch}
        onChange={handleChange}
        required
      />
    </div>
    <div className="form-group">
      <label>Account No:</label>
      <input
        type="text"
        name="bankDetails.accountNo"
        value={formData.bankDetails.accountNo}
        onChange={handleChange}
        required
      />
    </div>
    <div className="form-group">
      <label>IFSC Code:</label>
      <input
        type="text"
        name="bankDetails.ifscCode"
        value={formData.bankDetails.ifscCode}
        onChange={handleChange}
        required
      />
    </div>
  </div>
</div>

            <div className="button-container">
              <button type="submit" className="submit-button">
                Enter
              </button>
              <button
                type="button"
                className="clear-button"
                onClick={() =>
                  setFormData({
                    admissionId: "",
                    allotmentCategory: "",
                    feeCategory: "",
                    name: "",
                    photo: null,
                    address: "",
                    pincode:"",
                    religion: "",
                    community: "",
                    gender: "",
                    dateOfBirth: "",
                    bloodGroup: "",
                    mobileNo: "",
                    whatsappNo:"",
                    email: "",
                    entranceExam: {
                      name: "keam", 
                      other: "",
                    },
                    entranceRollNo: "",
                    entranceRank: "",
                    aadharNo: "",
                    course: "",
                    plusTwo: {
                      board: "",
                      registerNo: "",
                      examMonthYear: "",
                      percentage: "",
                      schoolName: "",
                      physics: "",
                      chemistry: "",
                      mathematics: "",
                    },
                    tenth: {
                      board: "",
                      registerNo: "",
                      examMonthYear: "",
                      percentage: "",
                      schoolName: "",
                      physics: "",
                      chemistry: "",
                      mathematics: "",
                    },
                    parentDetails: {
                      father: {
                        name: "",
                        occupation: "",
                        mobileNo: "",
                      },
                      mother: {
                        name: "",
                        occupation: "",
                        mobileNo: "",
                      },
                      communicationAddress: "",
                    },
                    annualIncome: "",
                    nativity: "",
                    bankDetails: {
                      bankName: "",
                      branch: "",
                      accountNo: "",
                      ifscCode: "",
                    },
                  })
                }
              >
                Clear
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default DataEntryForm;



// DataViewEdit.js

import React, { useEffect, useState } from "react";
import axios from "axios";
import Navbar from "./OfficerNavbar";
import './DataEditing.css'

function DataViewEdit() {
  const [students, setStudents] = useState([]);

  useEffect(() => {
    fetchStudents();
  }, []);

  const fetchStudents = async () => {
    try {
      const response = await axios.get("/api/students");
      setStudents(response.data);
    } catch (error) {
      console.error("Error fetching students:", error);
    }
  };

  const updateStudentFee = async (studentId, field, value) => {
    try {
      await axios.put(`/api/students/${studentId}`, {
        [field]: value,
      });
      fetchStudents();
    } catch (error) {
      console.error("Error updating student fee:", error);
    }
  };

  const handleFeeChange = (studentId, field, event) => {
    const { value } = event.target;
    if (value) {
      updateStudentFee(studentId, field, value.toLowerCase());
    } else {
      updateStudentFee(studentId, field, value);
    }
  };

  const handleDelete = async (studentId) => {
    try {
      await axios.delete(`/api/students/${studentId}`);
      fetchStudents();
    } catch (error) {
      console.error("Error deleting student:", error);
    }
  };

  return (
    <div>
      <Navbar />
      <div className="table-layout">
        <table className="student-table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Register Number</th>
              <th>Date of Birth</th>
              <th>Age</th>
              <th>Branch</th>
              <th>Semester</th>
              <th>Address</th>
              <th>Gender</th>
              <th>Religion</th>
              <th>Caste</th>
              <th>Category</th>
              <th>Plus Two Mark Percentage</th>
              <th>Tenth Mark Percentage</th>
              <th>First Year Fees</th>
              <th>Second Year Fees</th>
              <th>Third Year Fees</th>
              <th>Fourth Year Fees</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {students.map((student) => (
              <tr key={student._id}>
                <td>{student.name}</td>
                <td>{student.email}</td>
                <td>{student.registerNumber}</td>
                <td>{student.dateOfBirth}</td>
                <td>{student.age}</td>
                <td>{student.branch}</td>
                <td>{student.semester}</td>
                <td>{student.address}</td>
                <td>{student.gender}</td>
                <td>{student.religion}</td>
                <td>{student.caste}</td>
                <td>{student.category}</td>
                <td>{student.plusTwoPercentage}</td>
                <td>{student.tenthPercentage}</td>
                <td>
                  <input
                    type="text"
                    value={student.firstYearFees || ""}
                    onChange={(event) =>
                      handleFeeChange(student._id, "firstYearFees", event)
                    }
                  />
                </td>
                <td>
                  <input
                    type="text"
                    value={student.secondYearFees || ""}
                    onChange={(event) =>
                      handleFeeChange(student._id, "secondYearFees", event)
                    }
                  />
                </td>
                <td>
                  <input
                    type="text"
                    value={student.thirdYearFees || ""}
                    onChange={(event) =>
                      handleFeeChange(student._id, "thirdYearFees", event)
                    }
                  />
                </td>
                <td>
                  <input
                    type="text"
                    value={student.fourthYearFees || ""}
                    onChange={(event) =>
                      handleFeeChange(student._id, "fourthYearFees", event)
                    }
                  />
                </td>
                <td>
                  <button onClick={() => handleDelete(student._id)}>
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default DataViewEdit;


// DataEntryPage.js
import React, { useState, useEffect, useCallback } from "react";
import DataEntryForm from "./DataEditing.js";
import axios from "axios";
import StudentList from "./StudentList";

function DataViewEdit() {
  const [students, setStudents] = useState([]);
  const [acceptedStudents, setAcceptedStudents] = useState([]);
  const [notAcceptedStudents, setNotAcceptedStudents] = useState([]);

  const fetchStudents = async () => {
    try {
      const response = await axios.get("/api/students");
      setStudents(response.data);
    } catch (error) {
      console.error("Error fetching students:", error);
    }
  };

  useEffect(() => {
    fetchStudents();
  }, []); // Fetch students on component mount

  const updateStudentStatus = async (studentId, status) => {
    try {
      await axios.put(`/api/students/${studentId}`, { status });
      fetchStudents();
    } catch (error) {
      console.error("Error updating student status:", error);
    }
  };

  const filterStudents = useCallback(() => {
    const accepted = students.filter((student) => student.status === "accepted");
    const notAccepted = students.filter((student) => student.status !== "accepted");
    setAcceptedStudents(accepted);
    setNotAcceptedStudents(notAccepted);
  }, [students]);

  useEffect(() => {
    filterStudents();
  }, [students,filterStudents]);

  return (
    <div>
      <DataEntryForm fetchStudents={fetchStudents} />
      <StudentList
        title="Accepted Students"
        students={acceptedStudents}
        updateStudentStatus={updateStudentStatus}
      />
      <StudentList
        title="Not Accepted Students"
        students={notAcceptedStudents}
        updateStudentStatus={updateStudentStatus}
      />
    </div>
  );
}

export default DataViewEdit;


// StudentList.js
import React from "react";

function StudentList({ title, students, updateStudentStatus }) {
  const handleStatusChange = (studentId, status) => {
    updateStudentStatus(studentId, status);
  };

  return (
    <div>
      <h2>{title}</h2>
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {students.map((student) => (
            <tr key={student.id}>
              <td>{student.name}</td>
              <td>
                <button onClick={() => handleStatusChange(student.id, "accepted")}>
                  Approve
                </button>
                <button onClick={() => handleStatusChange(student.id, "rejected")}>
                  Reject
                </button>
                {/* Add Edit and Remove buttons with appropriate handlers */}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default StudentList;

import React, { useState, useEffect } from "react";
import axios from "axios";

function DataViewEdit() {
  const [students, setStudents] = useState([]);
  const [showApproved, setShowApproved] = useState(true);

  useEffect(() => {
    fetchStudents();
  }, []);

  const fetchStudents = async () => {
    try {
      const response = await axios.get("/api/students");
      setStudents(response.data);
    } catch (error) {
      console.error("Error fetching students:", error);
    }
  };

  const handleEdit = (studentId) => {
    // Redirect to the edit page or show a modal for editing the student with ID: studentId
    console.log(`Edit student with ID: ${studentId}`);
  };

  const handleRemove = (studentId) => {
    // Implement logic to remove the student with ID: studentId
    console.log(`Remove student with ID: ${studentId}`);
  };

  const handleApprove = (studentId) => {
    // Update the local state to mark the student as approved
    setStudents((prevStudents) =>
      prevStudents.map((student) =>
        student.id === studentId ? { ...student, approved: true } : student
      )
    );
  };

  const handleViewDetails = (studentId) => {
    // Redirect to a page or show a modal to view the full details of the student with ID: studentId
    console.log(`View details of student with ID: ${studentId}`);
  };

  const handleShowApprovedChange = () => {
    setShowApproved(!showApproved);
  };

  return (
    <div>
      <h1>Student List</h1>
      <div>
        <label>Show Approved Students:</label>
        <input
          type="checkbox"
          checked={showApproved}
          onChange={handleShowApprovedChange}
        />
      </div>
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Admission ID</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {students.map((student) => (
            (showApproved || student.approved) && (
              <tr key={student.id}>
                <td>{student.name}</td>
                <td>{student.admissionId}</td>
                <td>
                  <button onClick={() => handleEdit(student.id)}>Edit</button>
                  <button onClick={() => handleRemove(student.id)}>Remove</button>
                  {!student.approved && (
                    <button onClick={() => handleApprove(student.id)}>Approve</button>
                  )}
                  <select onChange={() => handleViewDetails(student.id)}>
                    <option value="">Select</option>
                    <option value="view">View Details</option>
                  </select>
                </td>
              </tr>
            )
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default DataViewEdit;
